# source to own .zshrc

BLACK="%{"$'\033[01;30m'"%}"
GREEN="%{"$'\033[01;32m'"%}"
RED="%{"$'\033[01;31m'"%}"
YELLOW="%{"$'\033[01;33m'"%}"
BLUE="%{"$'\033[01;34m'"%}"
BOLD="%{"$'\033[01;39m'"%}"
NORM="%{"$'\033[00m'"%}"

# Doesn't work that well for now.
# mount | grep "${HOME}/gdrive" || { which google-drive-ocamlfuse &> /dev/null && google-drive-ocamlfuse "${HOME}/gdrive"; }

# Setup 'https://github.com/odeke-em/drive' first:
# $ mkdir gdrive
# $ cd gdrive
# $ drive init
# $ drive pull develop/

# Reference: https://github.com/bamos/zsh-history-analysis
export HISTSIZE=1000000000
export SAVEHIST=$HISTSIZE
setopt EXTENDED_HISTORY

GIT_PROMPT_EXECUTABLE="haskell"
source ~/zsh-git-prompt/zshrc.sh

if [ -z "${CUSTOM_HOST}" ]; then
  PROMPT='${GREEN}%n@%m${YELLOW}:%l${NORM}:[%1c${NORM}]$(git_super_status) '
else
  PROMPT='${GREEN}%n@${CUSTOM_HOST}${YELLOW}:%l${NORM}:[%1c${NORM}]$(git_super_status) '
fi

alias l='ls -lF'
alias ll='ls -laF'
alias h='htop'
# alias up='sudo apt-get -o Acquire::ForceIPv4=true update && sudo apt-get -o Acquire::ForceIPv4=true upgrade -y'
alias x='exit'

export MANPAGER="vim -c MANPAGER -"

if [ "$(uname 2> /dev/null)" = "Linux" ]; then
  export EDITOR=vim
  alias up='sudo apt update && apt list --upgradable && sudo apt upgrade -y && brew update -v && brew upgrade -v && flatpak update -y'
  alias upve='$EDITOR +PluginUpdate +qall && $EDITOR +GoUpdateBinaries +qall && git -C ~/.emacs.d/ pull && emacs --batch -l ~/.emacs.d/init.el --eval="(configuration-layer/update-packages t)" 2>&1 | tee /tmp/emacs-update && grep -i -E "Found.*to.*update.*" /tmp/emacs-update && emacs &'
  if [ -x "$(command -v cmus-remote)" ]; then
    alias cr='cmus-remote'
  fi
fi

if [ "$(uname 2> /dev/null)" = "Darwin" ]; then
  export EDITOR=mvim
  alias up='brew update --verbose && brew upgrade --verbose'
  alias meld='/Applications/Meld.app/Contents/MacOS/Meld'
  export PATH=$PATH:~/Library/Python/3.7/bin
fi

export GOPRIVATE="github.com/mobingilabs/*"
export GOPATH=$HOME/gopath
export GOPROXY=https://proxy.golang.org
export PATH=$PATH:$GOPATH/bin:$HOME/.npm-global/bin:$HOME/.rbenv/bin:$HOME/.rbenv/plugins/ruby-build/bin:/usr/share/bcc/tools

if [ -x "$(command -v rustc)" ]; then
  export RUST_SRC_PATH=`rustc --print sysroot`/lib/rustlib/src/rust/src
fi

eval "$(rbenv init -)"

# for Go1.11
export GO111MODULE=on

# Change 'ls' color for directory (I don't like the default blue).
# Reference: http://askubuntu.com/questions/466198/how-do-i-change-the-color-for-directories-with-ls-in-the-console
# Change to 'underlined orange', but looks like muted yellow, really.
# When using Putty though, this is not needed as blue is somewhat okay.
LS_COLORS=$LS_COLORS:'di=1;33'
export LS_COLORS

# zsh-bd
# https://github.com/Tarrasch/zsh-bd
. $HOME/.zsh/plugins/bd/bd.zsh

alias v="${EDITOR}"

# kubectl shortcuts
alias kc='kubectl config get-contexts'
alias kp='kubectl get pod -o wide'
alias kd='kubectl get deployment -o wide'
alias ks='kubectl get svc -o wide'
alias ki='kubectl get ingress'
alias kn='kubectl get node -o wide'
alias kt='kubectl top'
alias k='kubectl'

alias awsdev='echo -n "--region $AWS_REGION --key $AWS_ACCESS_KEY_ID_ASSUME --secret $AWS_SECRET_ACCESS_KEY_ASSUME --rolearn $ROLE_ARN"'
alias awsqa='echo -n "--region $AWS_REGION --key $AWS_ACCESS_KEY_ID_ASSUME_QA --secret $AWS_SECRET_ACCESS_KEY_ASSUME_QA --rolearn $ROLE_ARN_QA"'
alias awsnext='echo -n "--region $AWS_REGION --key $AWS_ACCESS_KEY_ID_ASSUME_NEXT --secret $AWS_SECRET_ACCESS_KEY_ASSUME_NEXT --rolearn $ROLE_ARN_NEXT"'
alias awsprod='echo -n "--region $AWS_REGION --key $AWS_ACCESS_KEY_ID_ASSUME_PROD --secret $AWS_SECRET_ACCESS_KEY_ASSUME_PROD --rolearn $ROLE_ARN_PROD"'

# switching gke clusters
alias kdev='gcloud config configurations activate default && gcloud container clusters get-credentials $(gcloud container clusters list | grep -i dev | cut -f 1 -d " ") && kubectl config current-context'
alias kqa='gcloud config configurations activate mochi-prod && gcloud container clusters get-credentials $(gcloud container clusters list | grep -i qa | cut -f 1 -d " ") && kubectl config current-context'
alias knext='gcloud config configurations activate mochi-prod && gcloud container clusters get-credentials $(gcloud container clusters list | grep -i next | cut -f 1 -d " ") && kubectl config current-context'
alias kprod='gcloud config configurations activate mochi-prod && gcloud container clusters get-credentials $(gcloud container clusters list | grep -i prod | cut -f 1 -d " ") && kubectl config current-context'

# log shortcuts
alias tracem="stern linkbatchd -s 1s | grep -i --line-buffered -E '\[cleanup\]|cleanup.*failed|\[summary|csv\]|decr=|cleanupall|distri|decr=.*input=.*date=[0-9]{4}-[0-9]{2}-[0-9]{2}|failed'"

# getting tokens
alias rtokenrootdev='ccf token --login-url logindev.mobingi.com/ripple --username $MOBINGI_RIPPLE_ROOT_USERNAME --password $MOBINGI_RIPPLE_ROOT_PASSWORD --client-id $MOBINGI_RIPPLE_OPENID_WEB_CLIENT_ID --client-secret $MOBINGI_RIPPLE_OPENID_WEB_CLIENT_SECRET'
alias rtokenrootprod='ccf token --login-url login.mobingi.com/ripple --username $MOBINGI_RIPPLE_ROOT_USERNAME_PROD --password $MOBINGI_RIPPLE_ROOT_PASSWORD_PROD --client-id $MOBINGI_RIPPLE_OPENID_WEB_CLIENT_ID_PROD --client-secret $MOBINGI_RIPPLE_OPENID_WEB_CLIENT_SECRET_PROD'
alias rtokendev='ccf token --login-url logindev.mobingi.com/ripple --username $MOBINGI_RIPPLE_USERNAME --password $MOBINGI_RIPPLE_PASSWORD --client-id $MOBINGI_RIPPLE_OPENID_WEB_CLIENT_ID --client-secret $MOBINGI_RIPPLE_OPENID_WEB_CLIENT_SECRET'
alias rtokenprod='ccf token --login-url login.mobingi.com/ripple --username $MOBINGI_RIPPLE_USERNAME_PROD --password $MOBINGI_RIPPLE_PASSWORD_PROD --client-id $MOBINGI_RIPPLE_OPENID_WEB_CLIENT_ID_PROD --client-secret $MOBINGI_RIPPLE_OPENID_WEB_CLIENT_SECRET_PROD'

alias tokenrootdev='ccf token --login-url logindev.mobingi.com --username $MOBINGI_ROOT_USERNAME --password $MOBINGI_ROOT_PASSWORD --client-id $MOBINGI_OPENID_WEB_CLIENT_ID --client-secret $MOBINGI_OPENID_WEB_CLIENT_SECRET'
alias tokenrootprod='ccf token --login-url login.mobingi.com --username $MOBINGI_ROOT_USERNAME_PROD --password $MOBINGI_ROOT_PASSWORD_PROD --client-id $MOBINGI_OPENID_WEB_CLIENT_ID_PROD --client-secret $MOBINGI_OPENID_WEB_CLIENT_SECRET_PROD'
alias tokendev='ccf token --login-url logindev.mobingi.com --username $MOBINGI_USERNAME --password $MOBINGI_PASSWORD --client-id $MOBINGI_OPENID_WEB_CLIENT_ID --client-secret $MOBINGI_OPENID_WEB_CLIENT_SECRET'
alias tokenprod='ccf token --login-url login.mobingi.com --username $MOBINGI_USERNAME_PROD --password $MOBINGI_PASSWORD_PROD --client-id $MOBINGI_OPENID_WEB_CLIENT_ID_PROD --client-secret $MOBINGI_OPENID_WEB_CLIENT_SECRET_PROD'

alias rkeydev='ccf token --login-url logindev.mobingi.com/ripple --client-id "$OPENAPI_ID_DEV" --client-secret $OPENAPI_SECRET_DEV --grant-type client_credentials'

alias sl='ssh lisbeth'
alias sy='ssh yavanna'

if [[ "$OSTYPE" == "linux-gnu" ]]; then
  alias open='xdg-open'
  # Set if vim colorscheme is solarized-light or flattened-light
  export FZF_DEFAULT_OPTS='
    --color fg:240,bg:230,hl:33,fg+:241,bg+:221,hl+:33
    --color info:33,prompt:33,pointer:166,marker:166,spinner:33
  '
fi

if [ -x "$(command -v wine)" ]; then
  alias word='wine "/home/f14t/.wine/drive_c/Program Files (x86)/Microsoft Office/Office12/WINWORD.EXE"'
  alias excel='wine "/home/f14t/.wine/drive_c/Program Files (x86)/Microsoft Office/Office12/EXCEL.EXE"'
  alias ppt='wine "/home/f14t/.wine/drive_c/Program Files (x86)/Microsoft Office/Office12/POWERPNT.EXE"'
fi

# kops/kubectl completion for zsh
# source <(kops completion zsh)

# kubectl completion for zsh
if [ -x "$(command -v kubectl)" ]; then
  source <(kubectl completion zsh)
fi

# stern completion for zsh
if [ -x "$(command -v stern)" ]; then
  source <(stern --completion=zsh)
fi

# helm completion for zsh
if [ -x "$(command -v helm)" ]; then
  source <(helm completion zsh)
fi

# https://thorsten-hans.com/autocompletion-for-kubectl-and-aliases-using-oh-my-zsh-6b5295dc6dfb
plugins=(git git-flow brew history node npm kubectl)
